--- eeepc-linux/module/eee.c	2008-01-15 05:47:24.000000000 +0100
+++ eeepc-linux-search-adapt/module/eee.c	2008-06-23 13:34:50.000000000 +0200
@@ -49,7 +49,7 @@
  * Note that this isn't really the "proper" way to use the I2C API... :)
  * I2C_SMBUS_BLOCK_MAX is 32, the maximum size of a block read/write.
  */
-static void eee_pll_init(void);
+static int eee_pll_init(void);
 static void eee_pll_read(void);
 static void eee_pll_write(void);
 static void eee_pll_cleanup(void);
@@ -63,11 +63,28 @@
 static char eee_pll_data[I2C_SMBUS_BLOCK_MAX];
 static int eee_pll_datalen = 0;
 
-static void eee_pll_init(void) {
-    eee_pll_smbus_client.adapter = i2c_get_adapter(0);
-
+static int eee_pll_init(void) {
+    int i = 0;
+    int found = 0;
+    struct i2c_adapter * adapt;
+
+    while ( (adapt = i2c_get_adapter(i)) != NULL) {
+	printk("Found adapter %s\n", adapt->name);
+	if (strstr(adapt->name, "I801")) { 
+	    found = 1;
+	    break;
+	}	
+	i++;
+    }
+    if ( found )	
+        eee_pll_smbus_client.adapter = adapt;
+    else {
+        printk("No i801 adapter found. is i2c_i801 inserted ?\n"); 
+        return -1;	
+    }
     // Fill the eee_pll_data buffer.
     eee_pll_read();
+    return 0;
 }
 
 // Takes approx 150ms to execute.
@@ -447,7 +464,9 @@
 /*** Module initialization ***/
 
 int init_module(void) {
-    eee_pll_init();
+    int ret;
+	ret = eee_pll_init();
+	if(ret) return ret;
     eee_proc_init();
     printk(KERN_NOTICE "Asus eeePC extras, version %s\n", EEE_VERSION);
     return 0;
